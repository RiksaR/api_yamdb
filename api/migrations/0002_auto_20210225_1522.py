# Generated by Django 3.0.5 on 2021-02-25 12:22

import api.managers
import api.validators
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id',
                 models.AutoField(
                     auto_created=True, primary_key=True,
                     serialize=False, verbose_name='ID')),
                ('name',
                 models.CharField(
                     db_index=True,
                     help_text='Введите название категории', max_length=100,
                     verbose_name='Название категории')),
                ('slug', models.SlugField(
                    help_text=('Slug должен быть уникальным и не превышать'
                               + ' 100 символов'),
                    max_length=100, unique=True,
                    verbose_name='Идентификатор страницы категории')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название жанра',
                                          max_length=100,
                                          verbose_name='Название жанра')),
                ('slug', models.SlugField(
                    help_text=('Slug должен быть уникальным и не превышать'
                               + '100 символов'),
                    max_length=100, unique=True,
                    verbose_name='Идентификатор страницы жанра')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AlterModelOptions(
            name='user',
            options={'ordering': ['-id']},
        ),
        migrations.AlterModelManagers(
            name='user',
            managers=[
                ('objects', api.managers.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='user',
            name='description',
        ),
        migrations.AddField(
            model_name='user',
            name='bio',
            field=models.CharField(blank=True, max_length=255, null=True,
                                   verbose_name='Биография'),
        ),
        migrations.AddField(
            model_name='user',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now,
                                       verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(
                default=True,
                help_text=('Designates whether this user should be treated'
                           + ' as active. Unselect this instead of'
                           + ' deleting accounts.'),
                verbose_name='active'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(
                default=False,
                help_text=('Designates whether the user can log into'
                           + ' this admin site.'),
                verbose_name='staff status'),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(max_length=254, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(
                choices=[('user', 'User'), ('moderator', 'Moderator'),
                         ('admin', 'Admin')], default='user', max_length=50,
                verbose_name='Role'),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={
                'unique': 'A user with that username already exists.'},
                help_text=('Required. 150 characters or fewer. '
                           + 'Letters, digits and @/./+/-/_ only.'),
                max_length=150, unique=True, validators=[
                    django.contrib.auth.validators.UnicodeUsernameValidator()],
                verbose_name='username'),
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name',
                 models.CharField(help_text='Введите название произведения',
                                  max_length=100,
                                  verbose_name='Название произведения')),
                ('year', models.IntegerField(
                    blank=True,
                    help_text='Введите год выхода произведения',
                    null=True, validators=[
                        api.validators.year_validator],
                    verbose_name='Год выхода произведения')),
                ('rating', models.PositiveIntegerField(
                    blank=True,
                    help_text='Поставьте рейтинг этому произведению',
                    null=True, validators=[
                        django.core.validators.MaxValueValidator(10)],
                    verbose_name='Рейтинг произведения на основе отзывов')),
                ('description', models.TextField(
                    blank=True,
                    help_text='Введите описание произведения',
                    null=True,
                    verbose_name='Описание произведения')),
                ('category', models.ForeignKey(
                    blank=True,
                    help_text=('Вы можете выбрать категорию для'
                               + 'этого произведения'),
                    null=True,
                    on_delete=django.db.models.deletion.SET_NULL,
                    related_name='titles',
                    to='api.Category',
                    verbose_name='Название категории')),
                ('genre', models.ManyToManyField(
                    blank=True,
                    help_text='Вы можете выбрать жанр для этого произведения',
                    related_name='titles',
                    to='api.Genre',
                    verbose_name='Название жанра')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('score', models.PositiveIntegerField(
                    validators=[django.core.validators.MaxValueValidator(10),
                                django.core.validators.MinValueValidator(1)])),
                ('pub_date',
                 models.DateTimeField(auto_now_add=True, db_index=True)),
                ('author',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='reviews',
                                   to=settings.AUTH_USER_MODEL)),
                ('title_id',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='reviews', to='api.Title')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('author',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='comments',
                                   to=settings.AUTH_USER_MODEL)),
                ('review_id',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   related_name='comments', to='api.Review')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
    ]
